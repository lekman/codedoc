name: "CI Checks for Library"
on:
  workflow_dispatch:
  push:
    paths:
      - "lib/**"
      - ".github/workflows/ci.lib.yml"
env:
  PROJECT_PATH: "./lib"
jobs:
  check:
    name: "Build Verification, Audit and Unit Tests"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
      actions: read
      checks: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
      - name: "Audit library"
        id: audit
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          npm i --package-lock-only
          audit_result=$(npm audit --omit=dev --json)
          if [[ $(echo $audit_result | jq -r '.metadata.vulnerabilities.moderate') != "0" || \
                $(echo $audit_result | jq -r '.metadata.vulnerabilities.high') != "0" || \
                $(echo $audit_result | jq -r '.metadata.vulnerabilities.critical') != "0" ]]; then
            echo "Found vulnerabilities above 'low' severity. Stopping workflow."
            echo $audit_result | jq -r '.metadata.vulnerabilities' 
            exit 1
          else
            echo "No vulnerabilities found above 'low' severity."
          fi
        shell: bash

      - name: "Install dependencies"
        shell: bash
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          npm install

      - name: "Build"
        shell: bash
        working-directory: ${{ env.PROJECT_PATH }}
        run: npm run build

      - name: "Lint"
        shell: bash
        working-directory: ${{ env.PROJECT_PATH }}
        run: npm run lint --if-present

      - name: "Unit Tests"
        shell: bash
        working-directory: ${{ env.PROJECT_PATH }}
        run: npm run test:coverage --if-present

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: JEST Tests
          path: ${{ env.PROJECT_PATH }}/coverage/junit.xml
          reporter: jest-junit
